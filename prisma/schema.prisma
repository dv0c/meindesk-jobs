// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Website {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String   @unique
  title     String

  analytics Analytics[]

  userId String
  User   User   @relation(fields: [userId], references: [id])
}

model Analytics {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  websiteId String

  pageViews           Int
  bounceRate          Float
  avgTimeOnPage       Float
  avgPageLoadTime     Float
  avgSessionDuration  Float
  avgClicksPerSession Float
  avgPageDepth        Float
  avgSessionPerUser   Float
  Website             Website @relation(fields: [websiteId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum Status {
  VERIFIED
  DISABLED
}

model User {
  id              String    @id @default(uuid())
  name            String
  firstName       String?
  lastName        String?
  username        String?
  image           String?
  email           String?   @unique
  emailVerified   DateTime?
  status          Status    @default(DISABLED)
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updateAt        DateTime  @updatedAt
  role            Role      @default(USER)
  personalization String    @default("unknown")
  sessions        Session[]
  accounts        Account[]
  Website         Website[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // No `@db.String` annotation needed for PostgreSQL
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) // Changed from auto() and @db.ObjectId for PostgreSQL compatibility
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
